import _regeneratorRuntime from "@babel/runtime/regenerator";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useRef, useEffect, useImperativeHandle, useState, useMemo } from 'react';
import CodeMirror from 'codemirror';
import 'codemirror/mode/meta';
import './codemirror.css';
import './index.css';
var defaultOptions = {
  tabSize: 2,
  autoCloseBrackets: true,
  matchBrackets: true,
  showCursorWhenSelecting: true,
  // 显示行号
  lineNumbers: true,
  fullScreen: true
};

function ReactCodeMirror() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var ref = arguments.length > 1 ? arguments[1] : undefined;
  var _props$options = props.options,
      options = _props$options === void 0 ? {} : _props$options,
      _props$value = props.value,
      value = _props$value === void 0 ? '' : _props$value,
      _props$width = props.width,
      width = _props$width === void 0 ? '100%' : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? '100%' : _props$height;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      editor = _useState2[0],
      setEditor = _useState2[1];

  var textareaRef = useRef();
  useImperativeHandle(ref, function () {
    return {
      editor: editor
    };
  }, [editor]); // 将props中所有的事件处理函数映射并保存

  function getEventHandleFromProps() {
    var propNames = Object.keys(props);
    var eventHandle = propNames.filter(function (keyName) {
      return /^on+/.test(keyName);
    });
    var eventDict = {};
    eventHandle.forEach(function (ele) {
      var name = ele.slice(2);
      eventDict[ele] = name.replace(name[0], name[0].toLowerCase());
    });
    return eventDict;
  } // http://codemirror.net/doc/manual.html#config


  function setOptions(_x) {
    return _setOptions.apply(this, arguments);
  }

  function _setOptions() {
    _setOptions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(instance) {
      var opt,
          mode,
          _args = arguments;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              opt = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

              if (!(_typeof(opt) === 'object' && window)) {
                _context.next = 8;
                break;
              }

              mode = CodeMirror.findModeByName(opt.mode || '');

              if (!(mode && mode.mode)) {
                _context.next = 6;
                break;
              }

              _context.next = 6;
              return import("codemirror/mode/".concat(mode.mode, "/").concat(mode.mode, ".js"));

            case 6:
              if (mode) {
                opt.mode = mode.mime;
              }

              Object.keys(opt).forEach(function (name) {
                if (opt[name] && JSON.stringify(opt[name])) {
                  instance.setOption(name, opt[name]);
                }
              });

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _setOptions.apply(this, arguments);
  }

  useEffect(function () {
    if (!editor && window) {
      // 生成codemirror实例
      var instance = CodeMirror.fromTextArea(textareaRef.current, _objectSpread(_objectSpread({}, defaultOptions), options));
      var eventDict = getEventHandleFromProps();
      Object.keys(eventDict).forEach(function (event) {
        instance.on(eventDict[event], props[event]);
      });
      instance.setValue(value || '');

      if (width || height) {
        // 设置尺寸
        instance.setSize(width, height);
      }

      setEditor(instance);
      setOptions(instance, _objectSpread(_objectSpread({}, defaultOptions), options));
    }

    return function () {
      if (editor && window) {
        editor.toTextArea();
        setEditor(undefined);
      }
    };
  }, []);
  useMemo(function () {
    if (!editor || !window) return;
    var val = editor.getValue();

    if (value !== undefined && value !== val) {
      editor.setValue(value);
    }
  }, [value]);
  useMemo(function () {
    if (!editor || !window) return;
    editor.setSize(width, height);
  }, [width, height]);
  useMemo(function () {
    if (!editor || !window) return;
    setOptions(editor, _objectSpread(_objectSpread({}, defaultOptions), options));
  }, [options]);
  return /*#__PURE__*/React.createElement("textarea", {
    ref: textareaRef
  });
}

export default /*#__PURE__*/React.forwardRef(ReactCodeMirror); 
//# sourceMappingURL=index.js.map